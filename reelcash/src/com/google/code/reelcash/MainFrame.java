/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MainFrame.java
 *
 * Created on Jan 15, 2010, 4:40:05 PM
 */
package com.google.code.reelcash;

import com.google.code.reelcash.actions.DeleteInvoiceAction;
import com.google.code.reelcash.actions.ExitAction;
import com.google.code.reelcash.actions.PreviewInvoiceAction;
import com.google.code.reelcash.actions.ShowModalDialogAction;
import com.google.code.reelcash.data.DbManager;
import com.google.code.reelcash.data.InvoicesAdapter;
import com.google.code.reelcash.data.PrimaryKeyRow;
import com.google.code.reelcash.dialogs.InvoiceJDialog;
import com.google.code.reelcash.dialogs.ContactsJDialog;
import com.google.code.reelcash.table.FormattedDateRenderer;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.URL;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author andrei.olar
 */
public class MainFrame extends javax.swing.JFrame implements ListSelectionListener {

    private static final long serialVersionUID = 1L;
    private PreviewInvoiceAction preview;
    private InvoicesAdapter adapter;
    private PrimaryKeyRow currentInvoice;
    private PrimaryKeyRow currentAccount;
    private ContactsJDialog contactsDialog;

    /** Creates new form MainFrame */
    public MainFrame() {
        adapter = new InvoicesAdapter();
        currentInvoice = new PrimaryKeyRow("invoiceid");
        currentInvoice.set("invoiceid", -1);
        currentAccount = new PrimaryKeyRow("contactid");
        currentAccount.set("contactid", -1);
        initComponents();
        initToolBar();
        postInitComponents();
    }

    private void addToolBarButton(String imageKey, String text, char mnemonic, Action performAction) {
        JButton button = toolBar.add(performAction);

        if (null == imageKey || 1 > imageKey.length()) {
            button.setText(text);
        } else {
            URL rasa = getClass().getResource(imageKey);
            button.setIcon(new ImageIcon(rasa));
        }
        button.setMnemonic(mnemonic);
        button.setMinimumSize(new Dimension(32, 32));
        button.setMaximumSize(new Dimension(48, 48));
        button.setPreferredSize(button.getMaximumSize());
    }

    private void initToolBar() {
        preview = new PreviewInvoiceAction(-1, -1);
        addToolBarButton("images/toolbar/exit.png", "Exit", 'x', new ExitAction(0));
        toolBar.addSeparator();
        addToolBarButton("images/toolbar/settings.png", "User settings", 'u', new ShowModalDialogAction(getContactsDialog()));
        toolBar.addSeparator();
        addToolBarButton("images/toolbar/invoice.png", "New invoice", 'i', new ShowModalDialogAction(new InvoiceJDialog(this, null)));
        addToolBarButton("images/toolbar/invoice_edit.png", "Edit invoice", 'e', new ShowModalDialogAction(new InvoiceJDialog(this, currentInvoice)));
        addToolBarButton("images/toolbar/invoice_delete.png", "Delete invoice", 'd', new DeleteInvoiceAction(adapter, invoiceTable));
        toolBar.addSeparator();
        addToolBarButton("images/toolbar/show_report.png", "Show report", 'r', preview);

    }

    private void postInitComponents() {
        adapter.populateTableModel((DefaultTableModel) invoiceTable.getModel());
        Integer firstId = -1;
        if (invoiceTable.getRowCount() > 0) {
            firstId = ((Integer) invoiceTable.getModel().getValueAt(0, 0));
        }

        currentInvoice.set("invoiceid", firstId);
        preview.setInvoiceId(firstId);

        invoiceTable.getSelectionModel().addListSelectionListener(this);

        setMinimumSize(new Dimension(400, 300));
        setMaximumSize(getToolkit().getScreenSize());
        setPreferredSize(new Dimension((int) (getMaximumSize().getWidth() + getMinimumSize().getWidth()) / 2,
                (int) (getMaximumSize().getHeight() + getMinimumSize().getHeight()) / 2));
        setLocation(new Point((int) (getMaximumSize().getWidth() - getPreferredSize().getWidth()) / 2,
                (int) (getMaximumSize().getHeight() - getPreferredSize().getHeight()) / 2));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolBar = new javax.swing.JToolBar();
        invoicesPanel = new javax.swing.JPanel();
        invoiceScrollPane = new javax.swing.JScrollPane();
        invoiceTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        toolBar.setRollover(true);
        getContentPane().add(toolBar, java.awt.BorderLayout.NORTH);

        invoicesPanel.setLayout(new javax.swing.BoxLayout(invoicesPanel, javax.swing.BoxLayout.LINE_AXIS));

        invoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "InvoiceId", "Number", "Series", "Date", "Due date", "Customer"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceTable.getTableHeader().setReorderingAllowed(false);
        invoiceScrollPane.setViewportView(invoiceTable);
        invoiceTable.getColumnModel().getColumn(0).setMinWidth(0);
        invoiceTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        invoiceTable.getColumnModel().getColumn(0).setMaxWidth(0);
        invoiceTable.getColumnModel().getColumn(3).setCellRenderer(new FormattedDateRenderer());
        invoiceTable.getColumnModel().getColumn(4).setCellRenderer(new FormattedDateRenderer());

        invoicesPanel.add(invoiceScrollPane);

        getContentPane().add(invoicesPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane invoiceScrollPane;
    private javax.swing.JTable invoiceTable;
    private javax.swing.JPanel invoicesPanel;
    private javax.swing.JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    public void valueChanged(ListSelectionEvent e) {
        if (invoiceTable.getSelectedRowCount() < 1) {
            return;
        }

        Integer selectedId = ((Integer) invoiceTable.getModel().getValueAt(invoiceTable.getSelectedRow(), 0));
        currentInvoice.set("invoiceid", selectedId);
        preview.setInvoiceId(selectedId);
    }

    private ContactsJDialog getContactsDialog() {
        if (null == contactsDialog) {
            contactsDialog = new ContactsJDialog(this, true);
            contactsDialog.addWindowListener(new WindowListener() {

                public void windowOpened(WindowEvent e) {
                }

                public void windowClosing(WindowEvent e) {
                }

                public void windowClosed(WindowEvent e) {
                    currentAccount = contactsDialog.getCurrentAccount();
                    preview.setAccountId((Integer)currentAccount.get("contactid"));
                }

                public void windowIconified(WindowEvent e) {
                }

                public void windowDeiconified(WindowEvent e) {
                }

                public void windowActivated(WindowEvent e) {
                }

                public void windowDeactivated(WindowEvent e) {
                }
            });
        }
        return contactsDialog;
    }
}
