package com.google.code.reelcash.swing.invoices;

import com.google.code.reelcash.ReelcashException;
import com.google.code.reelcash.data.DataRow;
import com.google.code.reelcash.data.ReelcashDataSource;
import com.google.code.reelcash.data.documents.DocumentMediator;
import com.google.code.reelcash.data.documents.DocumentType;
import com.google.code.reelcash.data.documents.InvoiceMediator;
import com.google.code.reelcash.data.sql.QueryMediator;
import com.google.code.reelcash.swing.ComboListCellRenderer;
import com.google.code.reelcash.util.Confirm;
import com.google.code.reelcash.util.MsgBox;
import java.awt.CardLayout;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author andrei.olar
 */
public class JInvoiceWizard extends javax.swing.JDialog {

    private static final long serialVersionUID = 4789786767938489010L;
    private ActionListener invoiceParamValidator;
    private InvoiceWizardAncestorListener ancestorListener;
    private ListModel seriesListModel;
    private final String[] pages = new String[]{"welcome", "series", "document", "params", "details"};
    private int currentPageIndex = 0;
    private Integer documentId = null;
    private Integer invoiceId = null;
    private String documentNo;
    private boolean first = true;
    private boolean forward = true;
    private final QueryMediator mediator = new QueryMediator(ReelcashDataSource.getInstance());

    /** Creates new form JInvoiceWizard */
    public JInvoiceWizard() {
        InvoiceMediator.getInstance().ensureDocumentType();
        DocumentMediator.getInstance().ensureStates();
        initComponents();
        setControlState();
        seriesList.addAncestorListener(getAncestorListener());
        invoiceDetailsPage.addAncestorListener(getAncestorListener());
        createDocumentPage.setDocumentType(DocumentType.INVOICE);
    }

    private InvoiceWizardAncestorListener getAncestorListener() {
        if (null == ancestorListener) {
            ancestorListener = new InvoiceWizardAncestorListener();
        }
        return ancestorListener;
    }

    private void setControlState() {
        prevPageButton.setEnabled(currentPageIndex > 0);
        final String nameKey = currentPageIndex < pages.length - 1 ? "next_page_button_text" : "finish_button_text";
        final String mnemonicKey = currentPageIndex < pages.length - 1 ? "next_page_button_mnemonic" : "finish_button_mnemonic";
        nextPageButton.setText(InvoiceResources.getString(nameKey));
        nextPageButton.setMnemonic(InvoiceResources.getString(mnemonicKey).charAt(0));
    }

    private void showPage() {
        if ("series".equals(pages[currentPageIndex])) {
            try {
                if (!first || 1 > (Integer) mediator.executeScalar("select count(*) from `series_ranges` where counter < max_value") || JOptionPane.NO_OPTION == Confirm.confirm(InvoiceResources.getString("attach_series_question"))) {
                    currentPageIndex++;
                }
            } catch (SQLException ex) {
                MsgBox.error(ex.getLocalizedMessage());
            }
        }

        ((CardLayout) wizardPages.getLayout()).show(wizardPages, pages[currentPageIndex]);
        setControlState();
    }

    public ListModel getSeriesListModel() {
        if (null == seriesListModel) {
            seriesListModel = new DefaultListModel();
        }
        return seriesListModel;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    wizardPages = new javax.swing.JPanel();
    welcomePage = new javax.swing.JScrollPane();
    welcomeTextPane = new javax.swing.JTextPane();
    seriesRangePanel = new javax.swing.JPanel();
    seriesScrollPane = new javax.swing.JScrollPane();
    seriesList = new javax.swing.JList();
    createDocumentPage = new com.google.code.reelcash.swing.invoices.JDocumentPanel();
    invoiceParamsPage = new com.google.code.reelcash.swing.invoices.JInvoiceParamsPanel();
    invoiceDetailsPage = new com.google.code.reelcash.swing.invoices.JInvoiceDetailsPanel();
    controlPanel = new javax.swing.JPanel();
    prevPageButton = new javax.swing.JButton();
    nextPageButton = new javax.swing.JButton();
    closeButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Create invoice");

    wizardPages.setLayout(new java.awt.CardLayout());

    welcomePage.setPreferredSize(new java.awt.Dimension(500, 30));

    welcomeTextPane.setEditable(false);
    welcomeTextPane.setEditorKit(new HTMLEditorKit());
    welcomeTextPane.setText(InvoiceResources.getString("welcome_text")); // NOI18N
    welcomePage.setViewportView(welcomeTextPane);

    wizardPages.add(welcomePage, "welcome");

    seriesRangePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder(null, InvoiceResources.getString("select_series_range_title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18)), javax.swing.BorderFactory.createEmptyBorder(15, 15, 30, 15))); // NOI18N
    seriesRangePanel.setLayout(new java.awt.BorderLayout());

    seriesList.setModel(getSeriesListModel());
    seriesScrollPane.setViewportView(seriesList);

    seriesRangePanel.add(seriesScrollPane, java.awt.BorderLayout.CENTER);

    wizardPages.add(seriesRangePanel, "series");

    createDocumentPage.setBorder(javax.swing.BorderFactory.createTitledBorder(null, InvoiceResources.getString("create_document_title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 18))); // NOI18N
    wizardPages.add(createDocumentPage, "document");
    wizardPages.add(invoiceParamsPage, "params");
    wizardPages.add(invoiceDetailsPage, "details");

    getContentPane().add(wizardPages, java.awt.BorderLayout.CENTER);

    controlPanel.setBackground(java.awt.SystemColor.controlHighlight);
    controlPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 20, 15));

    prevPageButton.setMnemonic('p');
    prevPageButton.setText("Previous");
    prevPageButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        prevPageButtonActionPerformed(evt);
      }
    });
    controlPanel.add(prevPageButton);

    nextPageButton.setMnemonic('n');
    nextPageButton.setText("Next");
    nextPageButton.setPreferredSize(new java.awt.Dimension(73, 23));
    nextPageButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        nextPageButtonActionPerformed(evt);
      }
    });
    controlPanel.add(nextPageButton);

    closeButton.setMnemonic('c');
    closeButton.setText("Close");
    closeButton.setPreferredSize(new java.awt.Dimension(73, 23));
    closeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        closeButtonActionPerformed(evt);
      }
    });
    controlPanel.add(closeButton);

    getContentPane().add(controlPanel, java.awt.BorderLayout.PAGE_END);

    pack();
  }// </editor-fold>//GEN-END:initComponents

    private void prevPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevPageButtonActionPerformed
        if (1 > currentPageIndex) {
            MsgBox.info(InvoiceResources.getString("no_more_pages"));
            return;
        }
        if ("params".equals(pages[currentPageIndex])) {
            if (!invoiceParamsPage.isDataValid()) {
                return;
            }
        }

        forward = false;
        first = false;
        currentPageIndex--;
        if ("series".equals(pages[currentPageIndex])) {
            currentPageIndex--;
        }
        showPage();
    }//GEN-LAST:event_prevPageButtonActionPerformed

    private void nextPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextPageButtonActionPerformed
        if (currentPageIndex >= pages.length - 1) // save the invoice ...
        {
            setVisible(false);
            return;
        }
        if ("document".equals(pages[currentPageIndex]) && null == documentId) {
            if (JOptionPane.YES_OPTION == Confirm.confirm(InvoiceResources.getString("save_document_question"))) {
                DataRow row = null;
                try {
                    row = createDocumentPage.getDocumentRow();
                } catch (ReelcashException e) {
                    documentId = null;
                    MsgBox.error(e.getLocalizedMessage());
                    return;
                }

                try {
                    mediator.beginTransaction();
                    if (mediator.createRow("documents", row)) {
                        documentId = (Integer) mediator.executeScalar("select last_insert_rowid();");
                    }
                    mediator.commit();
                    invoiceParamsPage.setDocumentId(documentId);
                    prevPageButton.setEnabled(false);
                } catch (SQLException e) {
                    mediator.rollback();
                    documentId = null;
                    MsgBox.error(e.getLocalizedMessage());
                    return;
                }
            } else {
                return;
            }
        }

        if ("params".equals(pages[currentPageIndex])) {
            if (!invoiceParamsPage.isDataValid()) {
                return;
            }
            try {
                invoiceId = InvoiceMediator.getInstance().createInvoice(documentId,
                        invoiceParamsPage.getCurrencyId(),
                        invoiceParamsPage.getIssuerRepId(),
                        invoiceParamsPage.getRecipientRepId(),
                        invoiceParamsPage.getExchangeRateId());
            } catch (Throwable t) {
                invoiceId = null;
                MsgBox.exception(t);
            }
        }
        
        forward = true;
        currentPageIndex++;

        showPage();
        first = false;
    }//GEN-LAST:event_nextPageButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JInvoiceWizard().setVisible(true);
            }
        });
    }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton closeButton;
  private javax.swing.JPanel controlPanel;
  private com.google.code.reelcash.swing.invoices.JDocumentPanel createDocumentPage;
  private com.google.code.reelcash.swing.invoices.JInvoiceDetailsPanel invoiceDetailsPage;
  private com.google.code.reelcash.swing.invoices.JInvoiceParamsPanel invoiceParamsPage;
  private javax.swing.JButton nextPageButton;
  private javax.swing.JButton prevPageButton;
  private javax.swing.JList seriesList;
  private javax.swing.JPanel seriesRangePanel;
  private javax.swing.JScrollPane seriesScrollPane;
  private javax.swing.JScrollPane welcomePage;
  private javax.swing.JTextPane welcomeTextPane;
  private javax.swing.JPanel wizardPages;
  // End of variables declaration//GEN-END:variables

    private class InvoiceWizardAncestorListener implements AncestorListener {

        private final ComboListCellRenderer renderer = new ComboListCellRenderer(1);

        private void seriesPageShown() {
            try {
                DataRow[] rows = JInvoiceWizard.this.mediator.fetchSimple("select id, prefix || counter || suffix || ' - ' || ((max_value-counter)/inc_step) || 'p' as desc from series_ranges where counter<max_value;");
                for (DataRow row : rows) {
                    ((DefaultListModel) getSeriesListModel()).addElement(row);
                }
                JInvoiceWizard.this.seriesList.setCellRenderer(renderer);
            } catch (SQLException e) {
                MsgBox.error(e.getLocalizedMessage());
            }
        }

        private void seriesPageHidden() {
            javax.swing.JList list = JInvoiceWizard.this.seriesList;
            DefaultListModel model = (DefaultListModel) JInvoiceWizard.this.getSeriesListModel();
            if (JInvoiceWizard.this.forward && list.getSelectedIndex() > -1) {
                DataRow row = (DataRow) model.getElementAt(list.getSelectedIndex());
                try {
                    Integer seriesRangeId = Integer.valueOf(row.getValue(0).toString());
                    QueryMediator m = JInvoiceWizard.this.mediator;
                    if (m.execute("update series_ranges set counter=counter+1 where id=? and counter<max_value", seriesRangeId) > 0) {
                        Object result = m.executeScalar("select prefix||counter||suffix from series_ranges where id=?", seriesRangeId);
                        if (null != result) {
                            JInvoiceWizard.this.createDocumentPage.setDocumentNo(result.toString());
                        }
                    }
                } catch (SQLException e) {
                    MsgBox.exception(e);
                }
            }
            ((DefaultListModel) getSeriesListModel()).removeAllElements();

        }

        public void ancestorAdded(AncestorEvent event) {
            if (JInvoiceWizard.this.seriesList.equals(event.getSource())) {
                seriesPageShown();
            }
            if (JInvoiceWizard.this.invoiceDetailsPage.equals(event.getSource())) {
                JInvoiceWizard.this.invoiceDetailsPage.setInvoiceId(JInvoiceWizard.this.invoiceId);
            }
        }

        public void ancestorRemoved(AncestorEvent event) {
            if (JInvoiceWizard.this.seriesList.equals(event.getSource())) {
                seriesPageHidden();
            }
        }

        public void ancestorMoved(AncestorEvent event) {
            // nothing to be done here
        }
    }
}
